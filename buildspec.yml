version: 0.2
env:
  secrets-manager:
    LOGIN: "SONAR_CLOUD:SONAR_TOKEN"
    HOST: "SONAR_CLOUD:SONAR_HOST"
    Organization: "SONAR_CLOUD:SONAR_ORG"
    Project: "SONAR_CLOUD:SONAR_PROJ"
    ARTIFACTORY_USER: "ARTIFACTORY_CLOUD:JFROG_ART_USER"
    ARTIFACTORY_URL: "ARTIFACTORY_CLOUD:JFROG_ART_UTL"
    ARTIFACTORY_MVN_REPO: "ARTIFACTORY_CLOUD:JFROG_MVN_REPO"
    ARTIFACTORY_API_KEY: "ARTIFACTORY_CLOUD:JFROG_API_KEY"
    ARTIFACTORY_PASSWORD: "ARTIFACTORY_CLOUD:JFROG_ART_PASS"
phases:
  install:
    runtime-versions:
      java: corretto11
    commands:
      - wget https://dl.bintray.com/jfrog/jfrog-cli-go/1.12.1/jfrog-cli-linux-amd64/jfrog
      - chmod +x jfrog
  pre_build:
    commands:
      - apt-get update
      - apt-get install -y jq
      #- wget http://www-eu.apache.org/dist/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz
      #- tar xzf apache-maven-3.5.4-bin.tar.gz
      #- ln -s apache-maven-3.5.4 maven
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      - unzip ./sonar-scanner-cli-3.3.0.1492-linux.zip
      - export PATH=$PATH:/sonar-scanner-3.3.0.1492-linux/bin/
      - echo Running login to ECR...
      - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 913536217213.dkr.ecr.eu-west-2.amazonaws.com
      - echo Entering pre_build phase...
      - ./jfrog rt config --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --apikey $ARTIFACTORY_API_KEY
      - sed -i -e 's|ARTIFACTORY_USER|${ARTIFACTORY_USER}|g' settings.xml && sed -i -e 's|ARTIFACTORY_PASSWORD|${ARTIFACTORY_API_KEY}|g' settings.xml && sed -i -e 's|ARTIFACTORY_MVN_REPO|${ARTIFACTORY_MVN_REPO}|g' settings.xml
  build:
    commands:
      - echo Build started on `date`
      - mvn test
      - mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      - echo "-- $SONAR_TOKEN --- $SONAR_PROJ --- $SONAR_ORG ---- SONAR_HOST - $HOST, Token - $LOGIN, ProjectKey - $Project, Org - $Organization"
      - mvn -X -e sonar:sonar -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=$Project -Dsonar.organization=$Organization
      #- mvn -X -e sonar:sonar -Dsonar.login=$LOGIN -Dsonar.host.url=$HOST -Dsonar.projectKey=docker-helloworld -Dsonar.organization=SankarNiit
      - echo "sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST -Dsonar.projectKey=$SONAR_PROJ -Dsonar.organization=$SONAR_ORG"
      #- mvn -X -e sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST -Dsonar.projectKey=$SONAR_PROJ -Dsonar.organization=$SONAR_ORG
      - sleep 5
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$Project >result.json
      - cat result.json
      - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
      - mvn clean install
      - ls target
      - pwd
      - ls
      - cp target/helloworld-1.1.jar HelloWorld.jar
      - docker build -t hello-world .
      
  post_build:
    commands:
     - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 913536217213.dkr.ecr.eu-west-2.amazonaws.com
     - IMAGE_TAG="test-1.0.0"
     - REPOSITORY_URI=913536217213.dkr.ecr.eu-west-2.amazonaws.com/docker-hello-world
     - docker tag hello-world:latest 913536217213.dkr.ecr.eu-west-2.amazonaws.com/docker-hello-world:$IMAGE_TAG
     - docker push 913536217213.dkr.ecr.eu-west-2.amazonaws.com/docker-hello-world:$IMAGE_TAG
     - echo $CODEBUILD_SRC_DIR
     - cd $CODEBUILD_SRC_DIR/target
     - printf '[{"name":"hello-world","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
     - ls
     - cat imagedefinitions.json
     - curl -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -T *.json "https://awspoc27.jfrog.io/artifactory/artifactory-build-info/"
     - curl -H "X-JFrog-Art-Api:$ARTIFACTORY_API_KEY" -T *.jar "https://awspoc27.jfrog.io/artifactory/artifactory-build-info/"
artifacts:
  files:
  - target/helloworld-1.1.jar
  - target/imagedefinitions.json
  - result.json
